<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pinia 的介绍及使用</title>
      <link href="/2023/02/07/Pinia-%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/07/Pinia-%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><span id="more"></span><p>为什么要用 pinia？在前端开发过程中，我们需要进行本地内容存储，全局变量存储，此时如果只是用localstorage，开发过程中会比较繁琐，并且当遇到需要监听存储数据变化时，需要设置一些内容。但是如果使用了 pinia 以及 vuex 这些存储工具，会极大的减轻开发工作量。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-安装使用"><a href="#1-安装使用" class="headerlink" title="1. 安装使用"></a>1. 安装使用</h3><h4 id="1-1-安装下载"><a href="#1-1-安装下载" class="headerlink" title="1.1 安装下载"></a>1.1 安装下载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"># or with npm</span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h4 id="1-2-main-js-中引入"><a href="#1-2-main-js-中引入" class="headerlink" title="1.2 main.js 中引入"></a>1.2 main.js 中引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(pinia).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-3-根目录新建-store-index-js-中写入"><a href="#1-3-根目录新建-store-index-js-中写入" class="headerlink" title="1.3 根目录新建 store/index.js 中写入"></a>1.3 根目录新建 store/index.js 中写入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useStore</span>(); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-State"><a href="#2-State" class="headerlink" title="2. State"></a>2. State</h3><h4 id="2-1-定义-state"><a href="#2-1-定义-state" class="headerlink" title="2.1 定义 state"></a>2.1 定义 state</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123; </span><br><span class="line"><span class="attr">state</span>: <span class="function">() =&gt;</span> &#123; </span><br><span class="line"><span class="keyword">return</span> &#123; </span><br><span class="line"><span class="attr">counter</span>: <span class="number">0</span>, </span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span>, </span><br><span class="line"><span class="attr">isAdmin</span>: <span class="literal">true</span>, </span><br><span class="line">&#125; </span><br><span class="line">&#125;, </span><br><span class="line"><span class="attr">getters</span>:&#123;&#125;, </span><br><span class="line"><span class="attr">actions</span>:&#123;&#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-2-使用-state"><a href="#2-2-使用-state" class="headerlink" title="2.2 使用 state"></a>2.2 使用 state</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">A组件</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">&#123;&#123; name &#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useStore</span>(); </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123; name &#125; = store; </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-组件修改pinia的state数据"><a href="#2-3-组件修改pinia的state数据" class="headerlink" title="2.3 组件修改pinia的state数据"></a>2.3 组件修改pinia的state数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123; name &#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123; name &#125; = <span class="title function_">storeToRefs</span>(store);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">btn</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  name.<span class="property">value</span> = <span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-如果state数据需要批量更新"><a href="#2-4-如果state数据需要批量更新" class="headerlink" title="2.4  如果state数据需要批量更新"></a>2.4  如果state数据需要批量更新</h4><pre><code>store/index.js</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123;  </span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> &#123;  </span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span>,  </span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span>,  </span><br><span class="line">      <span class="attr">arr</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;,  </span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>使用$patch进行批量更新</em></p><h3 id="3-actions"><a href="#3-actions" class="headerlink" title="3. actions"></a>3. actions</h3><pre><code>actions就比较简单了，写入方法，比如我们可以让state中的某一个值+=，而且传入参数</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">changeCounter</span>(<span class="params"> val </span>)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span> += val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123; counter &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;add&#x27;</span>&gt;</span>加10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123; counter &#125;  = <span class="title function_">storeToRefs</span>(store);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  store.<span class="title function_">changeCounter</span>(<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-getters"><a href="#4-getters" class="headerlink" title="4. getters"></a>4. getters</h3><pre><code>getters和vuex的getters几乎类似，也是有缓存的机制</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;storeId&#x27;</span>, &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">counterPar</span>(<span class="params">  </span>)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">counter</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123; counterPar &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; counterPar &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; counterPar &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123; counter &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123; counter, counterPar &#125;  = <span class="title function_">storeToRefs</span>(store);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Scrapy 爬虫框架介绍</title>
      <link href="/2022/12/09/python-Scrapy-%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/12/09/python-Scrapy-%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre><code>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。  其最初是为了 页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。</code></pre><h2 id="架构概览"><a href="#架构概览" class="headerlink" title="架构概览"></a>架构概览</h2><p>![[Pasted image 20221209100634.png]]</p><h3 id="各组件作用"><a href="#各组件作用" class="headerlink" title="各组件作用"></a>各组件作用</h3><h4 id="Scrapy-Engine"><a href="#Scrapy-Engine" class="headerlink" title="Scrapy Engine"></a>Scrapy Engine</h4><pre><code>引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。 详细内容查看下面的数据流(Data Flow)部分。</code></pre><p>此组件相当于爬虫的“大脑”，是整个爬虫的调度中心。</p><h4 id="调度器-Scheduler"><a href="#调度器-Scheduler" class="headerlink" title="调度器(Scheduler)"></a>调度器(Scheduler)</h4><pre><code>调度器从引擎接受request并将他们入队，以便之后引擎请求他们时提供给引擎。</code></pre><p>初始的爬取URL和后续在页面中获取的待爬取的URL将放入调度器中，等待爬取。同时调度器会自动去除重复的URL（如果特定的URL不需要去重也可以通过设置实现，如post请求的URL）</p><h4 id="下载器-Downloader"><a href="#下载器-Downloader" class="headerlink" title="下载器(Downloader)"></a>下载器(Downloader)</h4><pre><code>下载器负责获取页面数据并提供给引擎，而后提供给spider。</code></pre><h4 id="Spiders"><a href="#Spiders" class="headerlink" title="Spiders"></a>Spiders</h4><pre><code>Spider是Scrapy用户编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。 每个spider负责处理一个特定(或一些)网站。</code></pre><h4 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h4><pre><code>Item Pipeline负责处理被spider提取出来的item。典型的处理有清理、 验证及持久化(例如存取到数据库中)。</code></pre><p>当页面被爬虫解析所需的数据存入Item后，将被发送到项目管道(Pipeline)，并经过几个特定的次序处理数据，最后存入本地文件或存入数据库。</p><h4 id="下载器中间件-Downloader-middlewares"><a href="#下载器中间件-Downloader-middlewares" class="headerlink" title="下载器中间件(Downloader middlewares)"></a>下载器中间件(Downloader middlewares)</h4><pre><code>下载器中间件是在引擎及下载器之间的特定钩子(specific hook)，处理Downloader传递给引擎的response。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</code></pre><p>通过设置下载器中间件可以实现爬虫自动更换user-agent、IP等功能。</p><h4 id="Spider中间件-Spider-middlewares"><a href="#Spider中间件-Spider-middlewares" class="headerlink" title="Spider中间件(Spider middlewares)"></a>Spider中间件(Spider middlewares)</h4><pre><code>Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</code></pre><h3 id="数据流-Data-flow"><a href="#数据流-Data-flow" class="headerlink" title="数据流(Data flow)"></a>数据流(Data flow)</h3><ol><li>引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。</li><li>引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。</li><li>引擎向调度器请求下一个要爬取的URL。</li><li>调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件(请求(request)方向)转发给下载器(Downloader)。</li><li>一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。</li><li>引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。</li><li>Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。</li><li>引擎将(Spider返回的)爬取到的Item给Item Pipeline，将(Spider返回的)Request给调度器。</li><li> (从第二步)重复直到调度器中没有更多地request，引擎关闭该网站。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python/Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 快捷键</title>
      <link href="/2022/11/30/Markdown-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/11/30/Markdown-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre><code>简单记录一些 markdown 的快捷键，方便以后查阅。</code></pre><table><thead><tr><th align="left">名称</th><th align="center">语法</th></tr></thead><tbody><tr><td align="left">标题</td><td align="center">用#号表示，#一级标题，##表示二级标题，依次类推</td></tr><tr><td align="left"><strong>字体加粗</strong></td><td align="center">左右用两个* <strong>包裹</strong>起来</td></tr><tr><td align="left"><em>斜体字</em></td><td align="center">左右用一个* <em>包裹</em>起来</td></tr><tr><td align="left"><em><strong>加粗斜体</strong></em></td><td align="center">左右用三个* <em><strong>包裹</strong></em>起来</td></tr><tr><td align="left"><del>删除线</del></td><td align="center">左右用两个~~ <del>包裹</del>起来</td></tr><tr><td align="left">&gt;引用</td><td align="center">在文字开头添加&gt;表示引用说明</td></tr><tr><td align="left">代码块</td><td align="center">通过或者4个空格缩进表示|Ctrl+K`</td></tr><tr><td align="left">有序列表</td><td align="center">直接在文字前加1. 2.符号要和文字之间加上一个字符的空格表示</td></tr><tr><td align="left">无序列表</td><td align="center">文字前加上 - 或 * 即可变为无序列表</td></tr><tr><td align="left">图片</td><td align="center">在光标所在行插入图片</td></tr><tr><td align="left">生成目录</td><td align="center">[TOC]表示，特殊，CSDN博客支持该语法</td></tr><tr><td align="left">分割线</td><td align="center">一行连续使用三个*** — ———表示分割线</td></tr><tr><td align="left">链接</td><td align="center">通过<a href="www.baidu.com">百度</a>写法表示超链接</td></tr><tr><td align="left">表格</td><td align="center">第一行:</td></tr></tbody></table><h2 id="Markdown-中的表格"><a href="#Markdown-中的表格" class="headerlink" title="Markdown 中的表格"></a>Markdown 中的表格</h2><p>要添加表，请使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列。您可以选择在表的任一端添加管道。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><p>单元格宽度可以变化，如下所示。呈现的输出将看起来相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax | Description |</span><br><span class="line">| --- | ----------- |</span><br><span class="line">| Header | Title |</span><br><span class="line">| Paragraph | Text |</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> 使用连字符和管道创建表可能很麻烦。为了加快该过程，请尝试使用<a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a>。使用图形界面构建表，然后将生成的Markdown格式的文本复制到文件中。</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><table><thead><tr><th align="left">Syntax</th><th align="center">Description</th><th align="right">Test Text</th></tr></thead><tbody><tr><td align="left">Header</td><td align="center">Title</td><td align="right">Here’s this</td></tr><tr><td align="left">Paragraph</td><td align="center">Text</td><td align="right">And more</td></tr></tbody></table><h2 id="格式化表格中的文字"><a href="#格式化表格中的文字" class="headerlink" title="格式化表格中的文字"></a>格式化表格中的文字</h2><p>您可以在表格中设置文本格式。例如，您可以添加链接，代码（仅反引号（<code>`</code>）中的单词或短语，而不是代码块）和强调。</p><p>您不能添加标题，块引用，列表，水平规则，图像或HTML标签。</p><h2 id="在表中转义管道字符"><a href="#在表中转义管道字符" class="headerlink" title="在表中转义管道字符"></a>在表中转义管道字符</h2><p>您可以使用表格的HTML字符代码（<code>&amp;#124;</code>）在表中显示竖线（<code>|</code>）字符。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 setup 语法糖的一些注意点</title>
      <link href="/2022/11/18/vue3-setup-%E8%AF%AD%E6%B3%95%E7%B3%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2022/11/18/vue3-setup-%E8%AF%AD%E6%B3%95%E7%B3%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>这篇文章主要记录一些 setup 语法糖需要注意的地方，之后关于 setup 的小问题就不会新开文章了。</p><h2 id="1-vue-中-this-refs-在-setup-语法糖中的使用方法"><a href="#1-vue-中-this-refs-在-setup-语法糖中的使用方法" class="headerlink" title="1. vue 中 this.refs 在 setup 语法糖中的使用方法"></a>1. vue 中 this.refs 在 setup 语法糖中的使用方法</h2><h3 id="vue-："><a href="#vue-：" class="headerlink" title="vue ："></a>vue ：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-input ref=&quot;usernameInput&quot;&gt;&lt;/base-input&gt;</span><br></pre></td></tr></table></figure><p>在 js 代码中可以通过下面的方法访问 usernameInput:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">usernameInput</span></span><br></pre></td></tr></table></figure><p><strong>可以调用里面的方法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 base-input 组件内有方法foo</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">usernameInput</span>.<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h3 id="vue3使用"><a href="#vue3使用" class="headerlink" title="vue3使用:"></a>vue3使用:</h3><p>父组件调用子组件的时候设置ref值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildVue ref=&quot;childRef&quot; /&gt;</span><br></pre></td></tr></table></figure><p>设置完成后，vue3可以通过ref方法获取:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> childRef = <span class="title function_">ref</span>();</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">childRef.<span class="property">value</span>.<span class="title function_">foo</span>(); <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><h2 id="2-vue2-和vue3的生命周期对比"><a href="#2-vue2-和vue3的生命周期对比" class="headerlink" title="2. vue2 和vue3的生命周期对比"></a>2. vue2 和vue3的生命周期对比</h2><h3 id="vue2-的生命周期："><a href="#vue2-的生命周期：" class="headerlink" title="vue2 的生命周期："></a>vue2 的生命周期：</h3><ol><li>创建数据代理、数据检测<br><a href="####beforeCreate()">beforeCrate()</a><br><a href="####Created()">created()</a></li><li>挂载<br><a href="####beforeMount()">beforeMount()</a><br><a href="####mounted()">mounted()</a></li><li>更新<br><a href="####beforeUpdate()">beforeUpdate()</a><br><a href="####updated()">updated()</a></li><li>销毁<br><a href="####beforeDestroy()">beforeDestroy()</a><br><a href="####destroyed()">destroyed()</a></li><li>activated 和 deactivated<br><a href="####activated()">activated()</a><br><a href="####deactivated()">deactivated()</a></li><li>errorCaptured<h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate()"></a>beforeCreate()</h4></li></ol><p><strong>在实例初始化之后</strong>,进行数据侦听和事件/侦听器的配置之前同步调用。<br>此时还没有进行数据代理，数据监测，<strong>所有vm身上并没有_data的属性</strong>。</p><h4 id="Create"><a href="#Create" class="headerlink" title="Create()"></a>Create()</h4><p>在<strong>实例创建完成后</strong>被立即同步调用。在这一步中，<strong>实例已完成对选项的处理</strong>，意味着以下内容已被配置完毕：<strong>数据侦听、计算属性、方法、事件/侦听器的回调函数。vm身上也存在_data属性</strong>。</p><h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount()"></a>beforeMount()</h4><p>在挂载开始之前被调用，这时页面中的插值语法都未被解析。**该钩子在服务器端渲染期间不被调用。</p><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted()"></a>mounted()</h4><p>实例被挂载后调用，页面中的插值语法已经被解析了。该钩子在服务器端渲染期间不被调用。</p><p>注意 mounted 不会保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 <code>mounted</code> 内部使用 <code>vm.$nextTick</code>。</p><h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate()"></a>beforeUpdate()</h4><p><strong>在数据发生改变后，DOM 被更新之前被调用。</strong> 该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务器端进行。</p><h4 id="updated"><a href="#updated" class="headerlink" title="updated()"></a>updated()</h4><p>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。</p><p>Updated 不会保证所有的子组件也都被重新渲染完毕。如果你希望等到整个视图都渲染完毕，可以在 updated 里使用 vm.$nextTick.</p><h4 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy()"></a>beforeDestroy()</h4><p><strong>实例销毁之前调用。在这一步，实例仍然完全可用。</strong></p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed()"></a>destroyed()</h4><p><strong>实例销毁后调用。</strong> 该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p>该钩子在服务器端渲染期间不被调用。</p><h4 id="activated（）"><a href="#activated（）" class="headerlink" title="activated（）"></a>activated（）</h4><p><strong>被 <code>keep-alive</code> 缓存的组件激活时调用</strong>。该钩子<strong>在服务器端渲染期间不被调用</strong>。</p><h4 id="deactivated（）"><a href="#deactivated（）" class="headerlink" title="deactivated（）"></a>deactivated（）</h4><p><strong>被 <code>keep-alive</code> 缓存的组件失活时调用。</strong> 该钩子在<strong>服务器端渲染期间不被调用</strong>。</p><h4 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a>errorCaptured</h4><p>2.5.0+ 新增，在捕获一个来自后代组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p><h4 id="完整生命周期图"><a href="#完整生命周期图" class="headerlink" title="完整生命周期图"></a>完整生命周期图</h4><p>![[Pasted image 20221118161919.png]]</p><h3 id="vue3的生命周期"><a href="#vue3的生命周期" class="headerlink" title="vue3的生命周期:"></a>vue3的生命周期:</h3><p>在vue3的生命周期中没有了销毁之前（beforeDestroy ）以及销毁完毕（destroyed ）这两个生命周期。</p><p>取而代之的是卸载，卸载之前(beforeUnmount )以及卸载完毕（unmounted ）</p><p>Vue3中，生命周期有两种写法：</p><ol><li><p>配置项的形式</p></li><li><p>组合式api的形式</p></li></ol><h4 id="配置项的形式："><a href="#配置项的形式：" class="headerlink" title="配置项的形式："></a>配置项的形式：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//配置项的形式使用生命周期钩子</span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line">            console.log(&#x27;beforeCreate&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            console.log(&#x27;created&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount()&#123;</span><br><span class="line">            console.log(&#x27;beforeMount&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            console.log(&#x27;mounted&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate()&#123;</span><br><span class="line">            console.log(&#x27;beforeUpdate&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated()&#123;</span><br><span class="line">            console.log(&#x27;updated&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUnmount()&#123;</span><br><span class="line">            console.log(&#x27;beforeUnmount&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        unmounted()&#123;</span><br><span class="line">            console.log(&#x27;unmounted&#x27;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>组合式api的形式：<br>使用组合式api的形式，生命周期的名称发生了一些小变化，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate -&gt; 使用 setup()</span><br><span class="line">created -&gt; 使用 setup()</span><br><span class="line">beforeMount -&gt; onBeforeMount</span><br><span class="line">mounted -&gt; onMounted</span><br><span class="line">beforeUpdate -&gt; onBeforeUpdate</span><br><span class="line">updated -&gt; onUpdated</span><br><span class="line">beforeUnmount-&gt; onBeforeUnmount</span><br><span class="line">unmounted-&gt; onUnmounted</span><br></pre></td></tr></table></figure><p>在使用生命周期时，需要先引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted&#125; from  &#x27;vue&#x27;</span><br></pre></td></tr></table></figure><p>![[Pasted image 20221118162448.png]]</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>